/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface GraphResource
 */
export interface GraphResource {
    /**
     * 
     * @type {number}
     * @memberof GraphResource
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof GraphResource
     */
    'name'?: string;
    /**
     * 
     * @type {Array<NodeResource>}
     * @memberof GraphResource
     */
    'nodes'?: Array<NodeResource>;
}
/**
 * 
 * @export
 * @interface NodeResource
 */
export interface NodeResource {
    /**
     * 
     * @type {number}
     * @memberof NodeResource
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof NodeResource
     */
    'internalId'?: number;
    /**
     * 
     * @type {string}
     * @memberof NodeResource
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof NodeResource
     */
    'positionType'?: NodeResourcePositionTypeEnum;
    /**
     * 
     * @type {Array<number>}
     * @memberof NodeResource
     */
    'childrenInternalIds'?: Array<number>;
}

export const NodeResourcePositionTypeEnum = {
    Start: 'START',
    Intermediate: 'INTERMEDIATE',
    Terminal: 'TERMINAL'
} as const;

export type NodeResourcePositionTypeEnum = typeof NodeResourcePositionTypeEnum[keyof typeof NodeResourcePositionTypeEnum];

/**
 * 
 * @export
 * @interface PageGraphResource
 */
export interface PageGraphResource {
    /**
     * 
     * @type {number}
     * @memberof PageGraphResource
     */
    'totalPages'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageGraphResource
     */
    'totalElements'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageGraphResource
     */
    'size'?: number;
    /**
     * 
     * @type {Array<GraphResource>}
     * @memberof PageGraphResource
     */
    'content'?: Array<GraphResource>;
    /**
     * 
     * @type {number}
     * @memberof PageGraphResource
     */
    'number'?: number;
    /**
     * 
     * @type {Sort}
     * @memberof PageGraphResource
     */
    'sort'?: Sort;
    /**
     * 
     * @type {number}
     * @memberof PageGraphResource
     */
    'numberOfElements'?: number;
    /**
     * 
     * @type {Pageable}
     * @memberof PageGraphResource
     */
    'pageable'?: Pageable;
    /**
     * 
     * @type {boolean}
     * @memberof PageGraphResource
     */
    'first'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageGraphResource
     */
    'last'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageGraphResource
     */
    'empty'?: boolean;
}
/**
 * 
 * @export
 * @interface Pageable
 */
export interface Pageable {
    /**
     * 
     * @type {number}
     * @memberof Pageable
     */
    'offset'?: number;
    /**
     * 
     * @type {Sort}
     * @memberof Pageable
     */
    'sort'?: Sort;
    /**
     * 
     * @type {number}
     * @memberof Pageable
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof Pageable
     */
    'pageSize'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Pageable
     */
    'paged'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Pageable
     */
    'unpaged'?: boolean;
}
/**
 * 
 * @export
 * @interface ResponseWrapperGraphResource
 */
export interface ResponseWrapperGraphResource {
    /**
     * 
     * @type {GraphResource}
     * @memberof ResponseWrapperGraphResource
     */
    'content'?: GraphResource;
}
/**
 * 
 * @export
 * @interface Sort
 */
export interface Sort {
    /**
     * 
     * @type {boolean}
     * @memberof Sort
     */
    'empty'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Sort
     */
    'sorted'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Sort
     */
    'unsorted'?: boolean;
}

/**
 * GraphControllerApi - axios parameter creator
 * @export
 */
export const GraphControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGraphs: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/graphs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGraphs1: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getGraphs1', 'id', id)
            const localVarPath = `/v1/graphs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GraphResource} graphResource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveGraph: async (graphResource: GraphResource, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'graphResource' is not null or undefined
            assertParamExists('saveGraph', 'graphResource', graphResource)
            const localVarPath = `/v1/graphs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(graphResource, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GraphControllerApi - functional programming interface
 * @export
 */
export const GraphControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GraphControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGraphs(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageGraphResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGraphs(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGraphs1(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseWrapperGraphResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGraphs1(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {GraphResource} graphResource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveGraph(graphResource: GraphResource, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseWrapperGraphResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveGraph(graphResource, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GraphControllerApi - factory interface
 * @export
 */
export const GraphControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GraphControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGraphs(options?: any): AxiosPromise<PageGraphResource> {
            return localVarFp.getGraphs(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGraphs1(id: number, options?: any): AxiosPromise<ResponseWrapperGraphResource> {
            return localVarFp.getGraphs1(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GraphResource} graphResource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveGraph(graphResource: GraphResource, options?: any): AxiosPromise<ResponseWrapperGraphResource> {
            return localVarFp.saveGraph(graphResource, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GraphControllerApi - object-oriented interface
 * @export
 * @class GraphControllerApi
 * @extends {BaseAPI}
 */
export class GraphControllerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphControllerApi
     */
    public getGraphs(options?: AxiosRequestConfig) {
        return GraphControllerApiFp(this.configuration).getGraphs(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphControllerApi
     */
    public getGraphs1(id: number, options?: AxiosRequestConfig) {
        return GraphControllerApiFp(this.configuration).getGraphs1(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GraphResource} graphResource 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GraphControllerApi
     */
    public saveGraph(graphResource: GraphResource, options?: AxiosRequestConfig) {
        return GraphControllerApiFp(this.configuration).saveGraph(graphResource, options).then((request) => request(this.axios, this.basePath));
    }
}


